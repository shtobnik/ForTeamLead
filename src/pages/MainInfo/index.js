import React, { useState, memo, useMemo, useEffect } from "react";
import { useSelector } from "react-redux";
import { selectMobile } from "../../redux/slices/main/mainSlice";
import { Skeleton, Grid, Stack, Box, Paper, Link, Typography, useTheme, styled } from "@mui/material";
import PrettySlider from "../../components/PrettySlider";
import Chart from 'react-apexcharts';
import { LastDays } from "./config/charts";
import { chartOptions, chartOptionsFall } from './config/charts';
import { friendsStory, followedData } from './config/other';
import RenderScore from "../../components/Table/RenderScore";
import Icon from '../../components/Icon';
import Table from "../../components/Table";
import Ethereum from '../../images/temp/etherium.svg';
import Sprite from '../../images/sprite.png';
import {
  StyledBoxTitle,
  StyledText,
  StyledLink,
  BootstrapTooltip,
  FollowedByImg,
  Favorite,
  RiseCount,
  StyledRise,
  Annotation,
  Following,
  StyledPageTitle
} from './styling';

import TableTwoData from '../../components/Table/config/table2.json';
import TableThreeData from '../../components/Table/config/table3.json';
import TableFourData from '../../components/Table/config/table4.json';
import TableFiveData from '../../components/Table/config/table5.json';


const MainInfo = () => {
  const theme = useTheme();
  const isMobile = useSelector(selectMobile);
  const isDark = theme.palette.mode === 'dark';
  const [isLoading, setIsLoading] = useState(true);
  const [imgWidth, setImgWidth] = useState(40);
  const { infoRows } = TableTwoData;
  const { foundersRows } = TableThreeData;
  const { investorsRows } = TableFourData;
  const { investorPortfolioRows } = TableFiveData;

  const chartsOptionsRise = chartOptions(theme, LastDays(7));
  const chartsOptionsFall = chartOptionsFall(theme, LastDays(7));

  const [isShowMore, setIsShowMore] = useState(false);
  const entriesShows = 5;

  const sliderValue = 217;

  const toggleText = () => {
    const show = !isShowMore;
    setIsShowMore(show);
  };

  const getDate = () => {
    return ((new Date()).toString().split(' ').splice(1, 3).join(' '));
  };

  const today = useMemo(() => getDate(), []);

  useEffect(() => {
    setTimeout(() => {
      setIsLoading(false);
    }, 3000);
  }, []);

  useEffect(() => {
    setImgWidth(isMobile ? 40 : 80);
    console.log('here');
  }, [isMobile]);

  const StyledPaper = styled(Paper)(({ theme }) => ({
    background: theme.palette.block.backgroundColor,
    boxShadow: theme.palette.block.shadow,
    color: theme.palette.menu.main,
    height: 'auto',
    borderRadius: '16px',
    [theme.breakpoints.down('md')]: {
      padding: '12px 8px',
      margin: '8px 8px 0 0!important'
    },
    [theme.breakpoints.up('md')]: {
      padding: '20px 16px',
      margin: '24px 24px 0 0!important'
    },
  }));

  return (
    <>
      <Stack direction="row" justifyContent="space-between" sx={{ mb: '17px', pr: { xs: '0', md: '57px' }, width: '100%' }}>
        <Stack direction="row" sx={{ display: { xs: 'none', md: 'flex' } }}>
          <Box>Generated by</Box>
          <Box sx={{ width: '102px', height: '24px', backgroundImage: `url(${Sprite})`, backgroundPosition: isDark ? '0 -22px' : '0 0', backgroundSize: '230px', backgroundRepeat: 'no-repeat', ml: '4px' }} />
        </Stack>
        <Stack direction="row" justifyContent="space-between" sx={{ width: { xs: '100%', md: 'auto' } }}>
          <Stack direction="row" alignItems="center">
            <Box sx={{ color: 'primary.main', fontSize: '24px', height: '27px', mr: '10px' }}>
              <Icon image={'Calendar'} />
            </Box>
            <Box sx={{ fontWeight: '700', fontSize: '16px', lineHeight: '24px', letterSpacing: '0.15px', color: 'text.black' }}>{today}</Box>
          </Stack>
          <Link href='#' underline="none" sx={{ backgroundColor: 'twitter', color: '#fff', fontSize: '20px', display: 'flex', direction: 'row', alignItems: 'center', ml: '31px', padding: '10px 16px', borderRadius: '25px', }}>
            <Icon image={'Twitter'} />
            <Box sx={{ fontSize: '14px', ml: '4px' }}>Tweet</Box>
          </Link>
        </Stack>
      </Stack>
      <Stack direction="row" spacing={{ xs: '8px', md: '24px' }} sx={{ margin: { xs: '-8px -8px 0 0', md: '-24px -24px 24px 0' }, flexWrap: 'wrap' }}>
        <StyledPaper sx={{ padding: '20px 20px 20px 34px', width: { xs: '55%', md: '280px' } }}>
          <Stack direction="row" alignItems="center">
            {isLoading ? (
              <Skeleton animation="wave" variant="circular" width={80} height={80} />
            ) : (
              <img alt="ethereum" src={Ethereum} width={imgWidth} />
            )}
            <Stack direction="column" justifyContent="space-between" sx={{ ml: "16px" }}>
              {isLoading ? (
                <>
                  <Skeleton animation="wave" width={130} height={28} sx={{ mb: '10px' }} />
                  <Skeleton animation="wave" width={130} height={28} />
                </>
              ) : (
                <>
                  <Box component="div" sx={{ fontSize: { xs: '12px', md: '20px' }, lineHeight: { xs: '16px', md: '28px' } }}>Ethereum<Box component="span" sx={{ color: '#ccc' }}>ETH</Box></Box>
                  <StyledLink underline="hover" href="@ethereum">@ethereum</StyledLink>
                </>
              )}

            </Stack>
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '40%', md: '160px' } }}>
          <Stack justifyContent="space-between" sx={{ height: '100%' }}>
            <StyledBoxTitle component="div">Followers</StyledBoxTitle>
            <Stack direction="row" alignItems="flex-end" justifyContent="space-between" sx={{ height: '100%' }}>
              {isLoading ? (
                <>
                  <Skeleton animation="wave" width={64} height={32} />
                </>
              ) : (
                <StyledText sx={{ lineHeight: { xs: '12px', md: '32px' } }}>44.2K</StyledText>
              )}
              <Stack direction="row" alignItems="baseline" sx={{ lineHeight: { xs: '12px', md: '32px' } }}>

                {isLoading ? (
                  <>
                    <Skeleton animation="wave" width={43} height={24} />
                  </>
                ) : (
                  <>
                    {
                      true ?
                        <Box sx={{ color: 'success.main', fontSize: { xs: '10px', md: '12px' } }}>
                          <Icon image={'Arrow'} />
                        </Box> :
                        <Box sx={{ color: 'error.main', transform: 'rotate(180deg)', fontSize: { xs: '10px', md: '12px' } }}>
                          <Icon image={'Arrow'} />
                        </Box>
                    }
                    <StyledRise component="span" rise={true}>1.19</StyledRise>
                  </>
                )}
              </Stack>
            </Stack>
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '100%', md: '336px' } }}>
          <Stack direction="column" justifyContent="space-between" sx={{ height: '100%' }}>
            <Stack direction="row" alignItems='center' justifyContent="space-between">
              <Stack direction="row" alignItems="center" spacing={1}>
                <Box sx={{ color: 'twitter', fontSize: '24px', lineHeight: 0, height: '24px' }}>
                  <Icon image={'Twitter'} />
                </Box>
                <StyledBoxTitle component="div">SCORE</StyledBoxTitle>
                <BootstrapTooltip title="Twitter Score based on who has followed the Twitter Account and the popularity of this account in crypto space" placement="top" >
                  <Box sx={{ color: 'blue', lineHeight: 0 }}>
                    <Icon sx={{ fontSize: '7px' }} image={'Info'} />
                  </Box>
                </BootstrapTooltip>
              </Stack>
              {isLoading ? (
                <>
                  <Skeleton animation="wave" width={91} height={33} />
                </>
              ) : (
                <>
                  <Box sx={{ fontWeight: '600', fontSize: ' 20px', lineHeight: '32px' }}>
                    <StyledText component="span">{sliderValue}</StyledText>/1000
                  </Box>
                </>
              )}
            </Stack>
            {isLoading ? (
              <>
                <Skeleton animation="wave" width={304} height={38} />
              </>
            ) : (
              <>
                <Box sx={{ marginBottom: '-15px' }}>
                  <PrettySlider
                    rainbow={'true'}
                    min={0}
                    max={1000}
                    disabled
                    defaultValue={sliderValue}
                  />
                </Box>
              </>
            )}
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '100%', md: '336px' } }}>
          <Stack justifyContent="space-between" sx={{ height: '100%' }}>
            <StyledBoxTitle component="div">description</StyledBoxTitle>
            {isLoading ? (
              <>
                <Skeleton animation="wave" width={304} height={48} />
              </>
            ) : (
              <>
                <Box>Open source platform to write and distribute decentralized applications.</Box>
              </>
            )}
          </Stack>
        </StyledPaper>
      </Stack>

      <Stack direction={{ xs: 'column', md: 'row' }} spacing="24px" sx={{ marginBottom: '64px' }}>
        <StyledPaper sx={{ width: { xs: '100%', md: '336px' } }}>
          <Stack justifyContent="space-between" sx={{ height: '100%' }}>
            <StyledBoxTitle component="div" sx={{ marginBottom: '24px' }}>FOLLOWED BY</StyledBoxTitle>
            <Grid container rowSpacing="18px" columnSpacing={{ xs: '7%', md: '16px' }}>
              {followedData.map((item, key) => (
                <Grid item key={key}>
                  {isLoading ? (
                    <>
                      <Skeleton animation="wave" variant="circular" width={48} height={48} />
                      <Skeleton animation="wave" width={48} height={20} sx={{ mt: '-12px', borderRadius: '10px' }} />
                    </>
                  ) : (
                    <>
                      <Box sx={{ position: 'relative' }}>
                        {item.isFavorite && <Favorite />}
                        <FollowedByImg img={item.image} />
                      </Box>
                      <Box sx={{ marginTop: '-12px', position: 'relative' }}>
                        <RenderScore value={item.count} />
                      </Box>
                    </>
                  )}
                </Grid>
              ))}
            </Grid>
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '100%', md: '220px' }, pb: '16px' }}>
          <Stack justifyContent="space-between" sx={{ height: '100%', position: 'relative' }}>
            <Stack direction="row" alignItems="flex-start" justifyContent="space-between">
              <StyledBoxTitle component="div" size={'16px'}>aUDIENCE score</StyledBoxTitle>
              <Box sx={{ color: 'twitter', fontSize: '17px' }}>
                <Icon image={'Twitter'} />
              </Box>
            </Stack>

            {isLoading ? (
              <>
                <Skeleton animation="wave" width={188} height={116} />
              </>
            ) : (
              <>
                <Box sx={{ position: 'relative' }}>
                  <RiseCount>
                    <Stack direction="row" alignItems="baseline">
                      {true ? <Box sx={{ color: 'success.main', fontSize: '24px', height: '24px' }}><Icon image={'Arrow'} /></Box> : <Box sx={{ color: 'error.main', transform: 'rotate(180deg)', fontSize: '24px', height: '24px' }}><Icon image={'Arrow'} /></Box>}
                      <StyledRise component="span" rise={true} chart>1.19</StyledRise>
                    </Stack>
                  </RiseCount>
                  <Chart options={chartsOptionsRise.options} series={chartsOptionsRise.series} />
                </Box>
              </>
            )}
            <Annotation>
              <Box component="span">for the last 7 days</Box>
            </Annotation>
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '100%', md: '220px' } }}>
          <Stack justifyContent="space-between" sx={{ height: '100%', position: 'relative' }}>
            <StyledBoxTitle component="div" size={'16px'}>followers stats</StyledBoxTitle>
            {isLoading ? (
              <>
                <Skeleton animation="wave" width={188} height={116} />
              </>
            ) : (
              <>
                <Box sx={{ position: 'relative' }}>
                  <RiseCount>
                    <Stack direction="row" alignItems="flex-end">
                      {false ? <Box sx={{ color: 'success.main', fontSize: '24px', height: '24px' }}><Icon image={'Arrow'} /></Box> : <Box sx={{ color: 'error.main', transform: 'rotate(180deg)', fontSize: '24px', height: '24px' }}><Icon image={'Arrow'} /></Box>}
                      <StyledRise component="span" rise={false} chart>1.19</StyledRise>
                    </Stack>
                  </RiseCount>
                  <Chart options={chartsOptionsFall.options} series={chartsOptionsFall.series} />
                </Box>
              </>
            )}
            <Annotation>
              <Box component="span">for the last 7 days</Box>
            </Annotation>
          </Stack>
        </StyledPaper>
        <StyledPaper sx={{ width: { xs: '100%', md: '336px' } }}>
          <Stack justifyContent="space-between" sx={{ height: '100%' }}>
            <StyledBoxTitle component="div">LAST friendship history</StyledBoxTitle>
            <Stack direction="column" spacing="10px">
              {friendsStory.map((friend, key) => (
                <Stack key={key} direction="row" alignItems="center" justifyContent={'flex-start'} sx={{ height: '42px', width: '100%' }}>
                  {isLoading ? (
                    <>
                      <Stack direction="row" sx={{ width: '166px' }}>
                        <Box sx={{ marginRight: '8px' }}>
                          <Skeleton animation="wave" variant="circular" width={40} height={40} />
                          <Skeleton animation="wave" width={40} height={16} sx={{ mt: '-12px' }} />
                        </Box>
                        <Stack direction="column">
                          <Skeleton animation="wave" width={96} height={16} sx={{ mb: '5px' }} />
                          <Skeleton animation="wave" width={96} height={12} />
                        </Stack>
                      </Stack>
                      <Skeleton animation="wave" width={70} height={23} />
                      <Skeleton animation="wave" width={80} height={23} sx={{ ml: '10px' }} />
                    </>
                  ) : (
                    <>
                      <Stack direction="row" sx={{ width: '166px' }}>
                        <Box sx={{ marginRight: '8px' }}>
                          <FollowedByImg img={friend.image} size={'small'} />
                          <Box sx={{ marginTop: '-12px', position: 'relative' }}>
                            <RenderScore value={friend.count} size={'small'} />
                          </Box>
                        </Box>
                        <Stack direction="column">
                          <Box component="span" sx={{ lineHeight: '16px' }}>{friend.name}</Box>
                          <StyledLink underline="hover" href="friend.link" size={'small'}>{friend.link}</StyledLink>
                        </Stack>
                      </Stack>
                      <Box sx={{ color: theme.palette.primary.gray, textAlign: 'center', width: '152px' }}>{friend.date}</Box>
                      <Following isFollow={friend.following} theme={theme} />
                    </>
                  )}
                </Stack>
              ))}
            </Stack>
          </Stack>
        </StyledPaper>
      </Stack>

      <Box sx={{ marginBottom: '40px' }}>
        <StyledPageTitle>COIN INFO</StyledPageTitle>
        {isLoading ? (
          <>
            <Skeleton animation="wave" width={'100%'} height={109} />
          </>
        ) : (
          <Table rows={infoRows} entriesShows={entriesShows} isOne={'true'} name={'coinInfo'} />
        )}
      </Box>

      <Box sx={{ marginBottom: '40px' }}>
        <StyledPageTitle>FOUNDERS</StyledPageTitle>
        {isLoading ? (
          <>
            <Skeleton animation="wave" width={'100%'} height={109} />
          </>
        ) : (
          <Table rows={foundersRows} entriesShows={entriesShows} name={'founders'} />
        )}
      </Box>

      <Box sx={{ marginBottom: '40px' }}>
        <StyledPageTitle>INVESTORS</StyledPageTitle>
        {isLoading ? (
          <>
            <Skeleton animation="wave" width={'100%'} height={109} />
          </>
        ) : (
          <Table rows={investorsRows} entriesShows={entriesShows} name={'investors'} />
        )}
      </Box>

      <Box sx={{ marginBottom: '40px' }}>
        <StyledPageTitle>INVEST PORTFOLIO</StyledPageTitle>
        {isLoading ? (
          <>
            <Skeleton animation="wave" width={'100%'} height={109} />
          </>
        ) : (
          <Table rows={investorPortfolioRows} entriesShows={entriesShows} name={'investorsPortfolio'} />
        )}
      </Box>


      {
        isLoading ? (
          <>
            <Skeleton animation="wave" width={'100%'} height={304} />
          </>
        ) : (
          <>
            <Stack sx={{ position: 'relative', height: isShowMore ? 'auto' : '246px', mb: '40px', overflow: 'hidden' }}>
              <Box sx={{ color: 'text.primary', fontWeight: '400', fontSize: '16px', lineHeight: '24px', letterSpacing: '0.15px' }}>
                <Typography variant="h4" sx={{ textAlign: 'left', color: 'text.grey' }}>ABOUT ETHEREUM</Typography>
                <Box>
                  The live <Box component="span">Bitcoin price</Box> today is $19 570,00 USD with a 24-hour trading volume of $19 143 932 638 USD. We update our BTC to USD price in real-time. Bitcoin is down ,75% in the last 24 hours. The current CoinMarketCap ranking is #1, with a live market cap of $373 493 871 669 USD. It has a circulating supply of 19 085 025 BTC coins and a max. supply of 21 000 000 BTC coins.
                  If you would like to know where to buy Bitcoin at the current rate, the top cryptocurrency exchanges for trading in Bitcoin stock are currently <Link href="#">Binance</Link>, <Link href="#">Bitget</Link>, <Link href="#">OKX</Link>, <Link href="#">Bybit</Link>, and <Link href="#">BTCEX</Link>. You can find others listed on our crypto <Link href="#">exchanges page</Link>.
                  <Box sx={{ fontSize: '28px', m: '20px 0' }}>What Is Bitcoin (BTC)?</Box>
                  Bitcoin is a decentralized cryptocurrency originally described in a 2008 whitepaper by a person, or group of people, using the alias Satoshi Nakamoto. It was launched soon after, in January 2009. Bitcoin is a peer-to-peer online currency, meaning that all transactions happen directly between equal, independent network participants, without the need for any intermediary to permit or facilitate them. Bitcoin was created, according to Nakamoto’s own words, to allow “online payments to be sent directly from one party to another without going through a financial institution.”
                </Box>
              </Box>
              {!isShowMore && <Box sx={{ background: `linear-gradient(0, ${theme.palette.background.default} 0%, rgba(255, 255, 255, 0) 100%)`, position: 'absolute', left: 0, bottom: 0, height: '246px', width: '100%' }} />}
            </Stack>
            <Stack direction="row" alignItems="center" onClick={toggleText} sx={{ cursor: 'pointer', color: 'primary.main', }}>
              <Box>Show More</Box>
              <Box sx={{ fontSize: '16px', ml: '5px', height: '12px', lineHeight: 0, transform: isShowMore ? 'rotate(180deg)' : 'none' }}>
                <Icon image={'Angle'} />
              </Box>
            </Stack>
          </>
        )
      }

    </>
  )
}

export default memo(MainInfo);
